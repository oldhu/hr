$(document).ready(function() {
	init();	
});

function init() {
  var currentOrgChartId = -1;
  
	$('.org-chart-history-item').click(function (event) {
	  elem = event.target;
	  text = elem.innerHTML;
	  id = $(elem).attr("id");
	  if (currentOrgChartId != id) {
	    currentOrgChartId = id;
	    $("#org-chart-history-menu")[0].innerHTML = text + " <span class=\"caret\"></span>";
	    if (currentOrgChartId == -1) {
	      del_link = "#"
	    } else {
  	    del_link = "<%= org_charts_path %>/" + currentOrgChartId;
	    }
      $("#delete_org_chart_link").attr("href", del_link);
	    load("<%= org_charts_path %>.json?id=" + id);
	  }
	});
	
  $('#edit_org_chart_link').click(function () {
    if (id == -1) return;
    openDialog("<%= org_charts_path %>/" + currentOrgChartId + "/edit", 450, "Edit Org Chart");
  });

	var m = [20, 20, 20, 20],
	    w = $("#chart").width() - m[1] - m[3],
	    h = $(document).height() - 55 - m[0] - m[2],
	    i = 0,
	    duration = 500,
	    root,
      blockWidth = 130;

	var tree = d3.layout.tree().size([h, w]);
	var diagonal = d3.svg.diagonal().source(source_transform).projection(function(d) { return [d.y, d.x]; });
	var vis = d3.select("#chart").append("svg")
	    .attr("width", w)
	    .attr("height", h)
	  	.append("g")
	  	.attr("transform", "translate(" + m[3] + "," + m[0] + ")");
	  	
	load("<%= org_charts_path %>.json");
	
	function source_transform(d) {
	  return { x : d.source.x, y : d.source.y + blockWidth };
	}
	  	
	function load(url) {
  	d3.json(url, function(json) {
  	  root = json;
  	  root.x0 = h / 2;
  	  root.y0 = 0;

  	  function collapse(d) {
  	    if (d.children) {
  	      d._children = d.children;
  	      d._children.forEach(collapse);
  	      d.children = null;
  	    }
  	  }
  	  root.children.forEach(function(c) {
  	    c.children.forEach(collapse);
  	  });
  	  update(root);
  	});
	}

	function update(source) {

	  // Compute the new tree layout.
	  var nodes = tree.nodes(root).reverse();

	  // Normalize for fixed-depth.
	  nodes.forEach(function(d) { d.y = d.depth * 200; });

	  // Update the nodes…
	  var node = vis.selectAll("g.node")
	      .data(nodes, function(d) { return d.id || (d.id = ++i); });

	  // Enter any new nodes at the parent's previous position.
	  var nodeEnter = node.enter().append("g")
	      .attr("class", "node")
	      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
	      .on("click", click);

	  nodeEnter.append("rect")
	      .attr("width", 1e-6)
	      .attr("height", 1e-6)
	      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; })
				.style("stroke", "#000");

	  nodeEnter.append("text")
	      .attr("class", "text-line-1")
	      .attr("x", 5)
	      .attr("dy", function(d) { return d.children || d._children ? "-0.35em" : "0.35em"; })
	      .attr("text-anchor", function(d) { return d.children || d._children ? "start" : "start"; })
	      .text(function(d) { return d.name + (typeof d.count == "undefined" ? "" : "(" + d.count + ")"); })
	      .style("fill-opacity", 1e-6);

	  nodeEnter.append("text")
	      .attr("class", "text-line-2")
	      .attr("x", 5)
	      .attr("dy", "1em")
	      .attr("text-anchor", function(d) { return d.children || d._children ? "start" : "start"; })
	      .text(function(d) { return d.manager })
	      .style("fill-opacity", 1e-6);

	  var nodeUpdate = node.transition()
	      .duration(duration)
	      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

	  nodeUpdate.select("rect")
	      .attr("y", function(d) { return d.children || d._children ? -20 : -10; })
				.attr("x",  0)
	      .attr("width", blockWidth)
	      .attr("height", function(d) { return d.children || d._children ? 40 : 20; })
	      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
	
	  nodeUpdate.select(".text-line-1")
	      .style("fill-opacity", 1);
	  nodeUpdate.select(".text-line-2")
	      .style("fill-opacity", 1);

	  // Transition exiting nodes to the parent's new position.
	  var nodeExit = node.exit().transition()
	      .duration(duration)
	      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
	      .remove();

	  nodeExit.select("circle")
	      .attr("r", 1e-6);

	  nodeExit.select("text")
	      .style("fill-opacity", 1e-6);

	  // Update the links…
	  var links = tree.links(nodes)
	  
	  
	  var link = vis.selectAll("path.link")
	      .data(links, function(d) { return d.target.id; });

	  // Enter any new links at the parent's previous position.
	  link.enter().insert("path", "g")
	      .attr("class", "link")
	      .attr("d", function(d) {
	        var o = {x: source.x0, y: source.y0};
	        return diagonal({source: o, target: o});
	      })
	    .transition()
	      .duration(duration)
	      .attr("d", diagonal);

	  // Transition links to their new position.
	  link.transition()
	      .duration(duration)
	      .attr("d", diagonal);

	  // Transition exiting nodes to the parent's new position.
	  link.exit().transition()
	      .duration(duration)
	      .attr("d", function(d) {
	        var o = {x: source.x, y: source.y};
	        return diagonal({source: o, target: o});
	      })
	      .remove();

	  // Stash the old positions for transition.
	  nodes.forEach(function(d) {
	    d.x0 = d.x;
	    d.y0 = d.y;
	  });
	}

	// Toggle children on click.
	function click(d) {
	  if (d.children) {
	    d._children = d.children;
	    d.children = null;
	  } else {
	    d.children = d._children;
	    d._children = null;
	  }
	  update(d);
	}
	
}